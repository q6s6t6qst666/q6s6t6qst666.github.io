<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于Java抽象类</title>
      <link href="/2023/04/03/%E5%85%B3%E4%BA%8Ejava%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
      <url>/2023/04/03/%E5%85%B3%E4%BA%8Ejava%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h2><ul><li>在所有的普通方法上面都会有一个“{}”，这个表示方法体，有方法体的方法一定可以被对象直接使用。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">xxx</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li>而抽象方法,是指没有方法体的方法,同时抽象方法还必须使用关键字abstract做修饰。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">xxx</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li><li>抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，子类便无法实现该方法），缺省情况下默认为public<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4></li><li>父类是将子类所共同拥有的属性和方法进行抽取，这些属性和方法中，有的是已经明确实现了的，有的还无法确定，那么我们就可以将其定义成抽象，在后日子类进行重用，进行具体化</li><li>所以，抽象类是为了把相同的但不确定的东西的提取出来，为了以后的重用。定义成抽象类的目的，就是为了在子类中实现抽象方法</li><li>拥有抽象方法的类就是抽象类（但抽象类中也可以不包含抽象方法），抽象类要使用abstract关键字声明<h4 id="抽象类的特性和使用"><a href="#抽象类的特性和使用" class="headerlink" title="抽象类的特性和使用"></a>抽象类的特性和使用</h4></li><li>抽象类不能被实例化。因为抽象类中方法未具体化，这是一种不完整的类，所以直接实例化也就没有意义了</li><li>抽象类的使用必须有子类，使用extends继承，一个子类只能继承一个抽象类</li><li>子类（如果不是抽象类）则必须<strong>覆写</strong>抽象类之中的全部抽象方法（如果子类没有实现父类的抽象方法，则必须将子类也定义为为abstract类。）</li><li>抽象类可以不包含抽象方法，但如果类中包含抽象方法，就必须将该类声明为抽象类<h4 id="抽象类的使用限制"><a href="#抽象类的使用限制" class="headerlink" title="抽象类的使用限制"></a>抽象类的使用限制</h4></li><li>抽象类可以有构造方法，且依然满足先执行父类构造，再执行子类构造的顺序</li><li>抽象类不能使用final声明，因为抽象类必须有子类，而final定义的类不能有子类</li><li>外部抽象类不允许使用static声明，而内部的抽象类可以使用static声明。<br>使用static声明的内部抽象类相当于一个外部抽象类，继承的时候使用“外部类.内部类”的形式表示类名称</li><li>有时候由于抽象类中只需要一个特定的系统子类操作，所以可以忽略掉外部子类。这样的设计在系统类库中会比较常见，目的是对用户隐藏不需要知道的子类</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Java类继承</title>
      <link href="/2023/04/03/%E5%85%B3%E4%BA%8EJava%E7%B1%BB%E7%BB%A7%E6%89%BF/"/>
      <url>/2023/04/03/%E5%85%B3%E4%BA%8EJava%E7%B1%BB%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="属性隐藏"><a href="#属性隐藏" class="headerlink" title="属性隐藏"></a>属性隐藏</h2><p>子类中声明了与超类中相同的成员变量名</p><ul><li>从超类继承的变量将被隐藏</li><li>子类拥有了两个相同名字的变量，一个继承自超类，另一个由自己声明</li><li>当子类执行继承自超类的操作时，处理的是继承自超类的变量，而当子类执行它</li><li>自己声明的方法时，所操作的就是它自己声明的变量<h2 id="访问被隐藏的超类属性"><a href="#访问被隐藏的超类属性" class="headerlink" title="访问被隐藏的超类属性"></a>访问被隐藏的超类属性</h2>本类中声明的方法使用“super.属性”访问从超类继承的属性<h2 id="方法覆盖"><a href="#方法覆盖" class="headerlink" title="方法覆盖"></a>方法覆盖</h2><h3 id="如果子类不需使用从超类继承来的方法的功能，则可以声明自己的同名方法，称为方法覆盖"><a href="#如果子类不需使用从超类继承来的方法的功能，则可以声明自己的同名方法，称为方法覆盖" class="headerlink" title="如果子类不需使用从超类继承来的方法的功能，则可以声明自己的同名方法，称为方法覆盖"></a>如果子类不需使用从超类继承来的方法的功能，则可以声明自己的同名方法，称为方法覆盖</h3></li><li>覆盖方法的返回类型，方法名称，参数的个数及类型必须和被覆盖的方法一摸一样</li><li>覆盖方法的访问权限可以比被覆盖的宽松，但是不能更为严格<h3 id="方法覆盖的注意事项"><a href="#方法覆盖的注意事项" class="headerlink" title="方法覆盖的注意事项"></a>方法覆盖的注意事项</h3></li><li>不能覆盖的方法<ul><li>基类中声明为final的终结方法</li><li>基类中声明为static 的静态方法</li></ul></li><li>调用被覆盖的方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>.overriddenMethodName();</span><br></pre></td></tr></table></figure><h2 id="子类的构造方法"><a href="#子类的构造方法" class="headerlink" title="子类的构造方法"></a>子类的构造方法</h2><h3 id="有继承时子类的构造方法遵循以下的原则"><a href="#有继承时子类的构造方法遵循以下的原则" class="headerlink" title="有继承时子类的构造方法遵循以下的原则"></a>有继承时子类的构造方法遵循以下的原则</h3></li><li>子类不能从超类继承构造方法</li><li>最好在子类的构造方法中使用super关键字显式调用超类的某个构造方法，调用语句必须出现在子类构造方法的第一行</li><li>如子类构造方法体中没有显式调用超类构造方法，则系统在执行子类的构造方法时会自动调用超类的默认构造方法（即无参的构造方法）<h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2></li><li>所有Java类的直接或间接超类</li><li>如果一个类没有继承任何超类，那么就隐含直接继承了Object类</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程与线程</title>
      <link href="/2023/03/29/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
      <url>/2023/03/29/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>线程是调度的基本单位<br>一个进程可能包含多个线程，一个进程的多个线程共享进程的资源<br>进程是操作系统分配资源的基本单位<br>线程在进程的基础上进一步提高了系统的并发性<br>进程相对线程，降低了创建调度和撤销的成本</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Java代码块</title>
      <link href="/2023/03/27/%E5%85%B3%E4%BA%8EJava%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
      <url>/2023/03/27/%E5%85%B3%E4%BA%8EJava%E4%BB%A3%E7%A0%81%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="static代码块和构造代码块"><a href="#static代码块和构造代码块" class="headerlink" title="static代码块和构造代码块"></a>static代码块和构造代码块</h1><p>结论:<strong>static代码块伴随着类的加载，只在类第一次被加载的时候调用一次<br>构造代码块是用来给新建的对象进行初始化的，构造几个对象，就调用多少次，是通用的<br>局部代码块是用于特定局部的一种代码，在执行完局部代码之后，就被释放掉了</strong><br></p><h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.bupt.qst;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticCode</span> &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// static 代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;static code&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;construction code &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    StaticCode(<span class="type">int</span> age)&#123;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">        System.out.println(<span class="string">&quot;construction method： &quot;</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 局部代码块</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> age=<span class="number">30</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;method show:&quot;</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="主类"><a href="#主类" class="headerlink" title="主类"></a>主类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.bupt.qst;</span><br><span class="line"><span class="keyword">import</span> edu.bupt.qst.StaticCode;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        StaticCode p2=<span class="keyword">new</span> <span class="title class_">StaticCode</span>(<span class="number">40</span>);</span><br><span class="line">        StaticCode p1=<span class="keyword">new</span> <span class="title class_">StaticCode</span>(<span class="number">20</span>);</span><br><span class="line">        p1.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/ppgUFds"><img src="https://s1.ax1x.com/2023/03/29/ppgUFds.png" alt="ppgUFds.png"></a></p><h1 id="构造代码块和构造方法"><a href="#构造代码块和构造方法" class="headerlink" title="构造代码块和构造方法"></a>构造代码块和构造方法</h1><p>结论:<strong><br>构造代码块<br>特点：对象一建立就运行了，而且优先于构造函数执行<br>作用：给对象进行初始化<br>构造代码块与构造方法区别：<br>构造代码块是给所有的对象进行统一的初始化(每次创建对象必调用)<br>构造方法是对应的对象进行初始化</strong></p><h4 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.bupt.qst;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test10</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person2</span> <span class="variable">A</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person2</span>();</span><br><span class="line">        <span class="type">Person2</span> <span class="variable">B</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person2</span>(<span class="string">&quot;小虎鲸&quot;</span>);</span><br><span class="line">        System.out.println(A.name);</span><br><span class="line">        System.out.println(B.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person2</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">//无参构造方法</span></span><br><span class="line">    Person2() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造方法</span></span><br><span class="line">    Person2(String name) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;有参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgloc.com/i/ikebHy"><img src="https://i.328888.xyz/2023/03/29/ikebHy.png" alt="ikebHy.png"></a></p><h1 id="静态-内部类-方法"><a href="#静态-内部类-方法" class="headerlink" title="(静态)内部类/方法"></a>(静态)内部类/方法</h1><p>静态内部类/方法 只能访问外部类中的静态成员，要访问非静态成员，必须依赖于外部类的实例对象<br>eg:</p><pre><code class="java">public class test11_student &#123;    class Test&#123;        int num;        public int getNum()&#123;            return num;        &#125;    &#125;    public static void main(String[] args) &#123;        test11_student test = new test11_student();        Test a = test.new Test();        a.num = 10;        System.out.println(a.getNum());    &#125;&#125;```he</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于c++与俄罗斯方块</title>
      <link href="/2022/12/25/qst%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/12/25/qst%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="关于c-与俄罗斯方块"><a href="#关于c-与俄罗斯方块" class="headerlink" title="关于c++与俄罗斯方块"></a>关于c++与俄罗斯方块</h1><p>emm浅谈一下自己用c++写的第一个小项目俄罗斯方块中遇到的困难</p><h2 id="1-关于easyx图形库"><a href="#1-关于easyx图形库" class="headerlink" title="1. 关于easyx图形库"></a>1. 关于easyx图形库<br></h2><ul><li><h4 id="头文件-lt-graphics-h-gt"><a href="#头文件-lt-graphics-h-gt" class="headerlink" title="头文件&lt;graphics.h&gt;"></a>头文件&lt;graphics.h&gt;</h4></li><li><h4 id="关于最后阶段做的game-over图片与you-winer图片在游戏结束后不显示的问题"><a href="#关于最后阶段做的game-over图片与you-winer图片在游戏结束后不显示的问题" class="headerlink" title="关于最后阶段做的game over图片与you winer图片在游戏结束后不显示的问题"></a>关于最后阶段做的game over图片与you winer图片在游戏结束后不显示的问题<br></h4>  刚开始百度以为是图片位深或者路径的问题，emm，但是在测试程序中如使用下代码<br>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;graphics.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IMAGE imgOver;</span><br><span class="line">    IMAGE imgWin;</span><br><span class="line">    IMAGE imgBg;</span><br><span class="line">    <span class="built_in">loadimage</span>(&amp;imgOver, <span class="string">&quot;res/over.jpg&quot;</span>);</span><br><span class="line">    <span class="built_in">loadimage</span>(&amp;imgBg, <span class="string">&quot;res/bg.png&quot;</span>);</span><br><span class="line">    <span class="built_in">loadimage</span>(&amp;imgWin, <span class="string">&quot;res/win.jpg&quot;</span>);</span><br><span class="line">    <span class="built_in">initgraph</span>(<span class="number">1000</span>, <span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">putimage</span>(<span class="number">0</span>, <span class="number">0</span>, &amp;imgBg);</span><br><span class="line">    <span class="built_in">putimage</span>(<span class="number">0</span>, <span class="number">0</span>, &amp;imgOver);</span><br><span class="line">    <span class="built_in">putimage</span>(<span class="number">0</span>, <span class="number">0</span>, &amp;imgWin);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="built_in">closegraph</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">发现无论是 **imgWin** 在下还是 **imgOver** 都能很好的覆盖之前的图片，这说明之前的假设是错误滴&lt;br&gt;</span><br><span class="line">emm最后翻找了一下代码发现相比于测试程序，我的源代码 **Tetris** 类中的 **play** 方法这一段</span><br><span class="line">```c++</span><br><span class="line"><span class="keyword">if</span> (gameOver) &#123;</span><br><span class="line">    <span class="comment">// 保存分数</span></span><br><span class="line">    <span class="built_in">saveScore</span>();</span><br><span class="line">    <span class="comment">// 更新游戏界面</span></span><br><span class="line">    <span class="built_in">displayOver</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;Pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">closegraph</span>();<span class="comment">// 没关闭窗口之前无法显示游戏结束图片</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">init</span>(); <span class="comment">// 重新开局</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  缺少了 <strong>closegraph()</strong> 函数，加上之后确实解决了问题，但是在测试程序中如下代码<br>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">initgraph</span>(<span class="number">1000</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">putimage</span>(<span class="number">0</span>, <span class="number">0</span>, &amp;imgOver);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">200</span>);</span><br><span class="line"><span class="built_in">putimage</span>(<span class="number">0</span>, <span class="number">0</span>, &amp;imgBg);<span class="comment">// 这里并没有出现源代码那样不显示直接跳过图片的情况</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">initgraph</span>(<span class="number">1000</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">putimage</span>(<span class="number">0</span>, <span class="number">0</span>, &amp;imgBg);</span><br><span class="line"><span class="built_in">putimage</span>(<span class="number">0</span>, <span class="number">0</span>, &amp;imgOver);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br></pre></td></tr></table></figure>  发现好像不加也不会出什么错，给整不会了，在这里记录一下这个小问题<h2 id="2-关于收获"><a href="#2-关于收获" class="headerlink" title="2. 关于收获"></a>2. 关于收获</h2></li><li><h4 id="行的清除与保存"><a href="#行的清除与保存" class="headerlink" title="行的清除与保存"></a>行的清除与保存<br></h4>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Tetris::clearLine</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> lines = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = rows - <span class="number">1</span>;<span class="comment">// 存储数据的行数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = rows - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">// 检查第i行是否满行</span></span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map[i][j]) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            map[k][j] = map[i][j];<span class="comment">// 一边扫描一边存储</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count &lt; cols) &#123;</span><br><span class="line">            <span class="comment">// 不是满行</span></span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 满行</span></span><br><span class="line">            lines++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>  初次接触感觉很巧妙这个方法，用 <strong>count</strong> 变量存储非空位置的个数，通过 <strong>if else</strong> 条件判断语句和变量 <strong>k</strong> 实现从下向上每行数据的存储<br>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map[k][j] = map[i][j];</span><br></pre></td></tr></table></figure>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (count &lt; cols) &#123;</span><br><span class="line">            <span class="comment">// 不是满行</span></span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>  这两行是精髓，如果不是满行则改为对上面一行进行判断</li><li><h4 id="如何脑袋空空开始设计程序"><a href="#如何脑袋空空开始设计程序" class="headerlink" title="如何脑袋空空开始设计程序"></a>如何脑袋空空开始设计程序</h4>  先设计类和程序接口，不要一上来就执着与具体方法的实现</li><li><h4 id="关于方块"><a href="#关于方块" class="headerlink" title="关于方块"></a>关于方块</h4>  首先看一下定义的 <strong>block</strong> 类<br>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;graphics.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="type">int</span> row;</span><br><span class="line">    <span class="type">int</span> col;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Block</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Block</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">drop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">moveLeftRight</span><span class="params">(<span class="type">int</span> offset)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">(<span class="type">int</span> leftMargin, <span class="type">int</span> topMargin)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> IMAGE** <span class="title">getImages</span><span class="params">()</span></span>;</span><br><span class="line">    Block&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Block&amp; other);</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">blockInMap</span><span class="params">(<span class="type">const</span> vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; map)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">solidify</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; map)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getBlockType</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> blockType;</span><br><span class="line">    Point smallBlocks[<span class="number">4</span>];<span class="comment">// 俄罗斯方块的四个小方块</span></span><br><span class="line">    IMAGE *img;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义七个指针分别指向七个不同颜色方块可以重复渲染</span></span><br><span class="line">    <span class="comment">// 一个imgs里的元素代表一种颜色的一个小方块</span></span><br><span class="line">    <span class="type">static</span> IMAGE* imgs[<span class="number">7</span>];</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>  注意这里<br>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> IMAGE** <span class="title">getImages</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>  为什么 <strong>getImages()</strong> 方法的返回值是 <strong>IMAGE**</strong>   <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">IMAGE** <span class="title">Block::getImages</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> imgs;<span class="comment">// 返回数组，数组名是指针，所以返回值类型为IMAGE**</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <strong>返回数组，数组名是指针，所以返回值类型为IMAGE**</strong><br><br>  通过方法 <strong>blockInMap</strong> 将 <strong>point</strong> 类的 <strong>smallBlocks</strong> 与数组 <strong>map</strong> 联系起来  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Block::blockInMap</span><span class="params">(<span class="type">const</span> vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; map)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rows = map.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> cols = map[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (smallBlocks[i].col &lt; <span class="number">0</span> || smallBlocks[i].col &gt;= cols ||</span><br><span class="line">            smallBlocks[i].row &lt; <span class="number">0</span> || smallBlocks[i].row &gt;= rows ||</span><br><span class="line">            map[smallBlocks[i].row][smallBlocks[i].col]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  通过 <strong>solidify</strong> 方法对 <strong>map</strong> 中的数值修改为 <strong>blockType</strong> 来达到固化方块的效果   <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Block::solidify</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; map)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 设置标记固化对应位置</span></span><br><span class="line">        map[smallBlocks[i].row][smallBlocks[i].col] = blockType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关于更改方块初始生成位置的问题"><a href="#关于更改方块初始生成位置的问题" class="headerlink" title="关于更改方块初始生成位置的问题"></a>关于更改方块初始生成位置的问题</h4>  发现方块无法向初始位置的左边移动，好像方块的初始位置就是地图的最左端<br><br>  原始正常代码  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用一种颜色的方块绘制图形</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Block::draw</span><span class="params">(<span class="type">int</span> leftMargin, <span class="type">int</span> topMargin)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x = leftMargin + smallBlocks[i].col * size;</span><br><span class="line">        <span class="type">int</span> y = topMargin + smallBlocks[i].row * size;</span><br><span class="line">        <span class="built_in">putimage</span>(x, y, img);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  此时方块的初始位置在屏幕的最左边，此时想让方块的初始位置在屏幕的中间<br>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = leftMargin + <span class="number">4</span> * size + smallBlocks[i].col * size;</span><br></pre></td></tr></table></figure>  于是修改了 <strong>x</strong><br><br>  这导致方块在下落过程中无法向开始位置的左边移动，因为每次调用 <strong>draw</strong>， <strong>x</strong> 都会加上 **(leftMargin + 4 * size)**，但是下落到底部之后又会回到它本来应该在的位置，感觉像是在调用 <strong>draw</strong> 的时候把所有的方块都画的偏移了，但方块自身的位置并没有变<br><h4 id="渲染方块的循环"><a href="#渲染方块的循环" class="headerlink" title="渲染方块的循环"></a>渲染方块的循环</h4>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (map[i][j] == <span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = j * blockSize + leftMargin;</span><br><span class="line"><span class="type">int</span> y = i * blockSize + topMargin;</span><br><span class="line"><span class="built_in">putimage</span>(x, y, imgs[map[i][j] - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  遍历地图检查每个位置是否为0，为0证明没有方块，则不渲染方块 <strong>(continue)</strong> ,不为0则渲染对应的方块类型<br><br>   <strong>(注意: 这里只是渲染已经固化的方块类型,这也解释了为什么方块掉落时位置与固化之后渲染的位置不一样)</strong> <br><br>  所以在后面加上这两段代码来渲染当前正在下落的方块和预告的下一个方块  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   curBlock-&gt;<span class="built_in">draw</span>(leftMargin, topMargin);</span><br><span class="line">nextBlock-&gt;<span class="built_in">draw</span>(leftMargin + <span class="number">12</span> * <span class="number">36</span> , topMargin);</span><br></pre></td></tr></table></figure>  绕了一圈发现巨简单的方法只要在初始化小方块的时候让它偏移到中间就可以了   <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 初始化smallBlocks</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确定是哪种组合方块</span></span><br><span class="line"><span class="type">int</span> value = blocks[blockType - <span class="number">1</span>][i];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确定组合方块中每个小方块的x坐标和y坐标</span></span><br><span class="line">smallBlocks[i].row = value / <span class="number">2</span>;</span><br><span class="line">smallBlocks[i].col = value % <span class="number">2</span> + <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  emmmmmmmmmmmmmmmmmmmm………..<br></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 项目解析 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
